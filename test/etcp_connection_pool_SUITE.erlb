-module(etcp_connection_pool_SUITE).
-export([init_per_suite/1
        ,end_per_suite/1
        ,init_per_testcase/2
        ,end_per_testcase/2
        ,all/0
        ,'1'/1
        ,'2'/1
        ,'3'/1
        ,'4'/1
        ,'5'/1
        ]).%,'6'/1]).

-include_lib("eunit/include/eunit.hrl").
-include_lib("common_test/include/ct.hrl").
-include("etcp.hrl").

-define(CALLBACK, etcp_connection_pool_callback).
-define(HOST, "127.0.0.1").
-define(START_OPTIONS, #{connection_debug => [trace]}).
-define(print(Txt, Args), begin timer:sleep(10), ct:pal(Txt, Args) end).
-define(ADDR(Port), {?HOST, Port}).


init_per_suite(Config) ->
    application:start(sasl),
    Config.



end_per_suite(_Config) ->
    application:stop(sasl),
    ok.



init_per_testcase(_TCName, Config) ->
    erlang:process_flag(trap_exit, true),
    Config.



end_per_testcase(_TCName, _Config) ->
    ok.





all() ->
    [erlang:list_to_atom(erlang:integer_to_list(Int))
    || Int <- lists:seq(1, erlang:length(?MODULE:module_info(exports)) - 8)].



'1'(_Cfg) ->
    Port = etcp_test_utils:choose_port(),
    ?print("Starting server.", []),
    {ok, LSock} = gen_tcp:listen(Port, []),

    Self = erlang:self(),
    F =
        fun
            (#etcp_metadata{transporter = etcp_transporter_tcp, transporter_options = [], socket = Sock}) when Sock =/= undefined ->
                {ok, [{state, Self}]};
            (handle_exit) ->
                Self
        end,
    {ok, Pool} = etcp:start_link_connection_pool(?CALLBACK, F, [?ADDR(Port)]),
    {ok, Sock} = gen_tcp:accept(LSock),
    Result = etcp:fetch_pool_connections(Pool),
    ?assertMatch([{{_, ?ADDR(Port)}, _}], Result),
    [{_, ConPid}] = Result,
    erlang:exit(ConPid, kill),
    receive
        {tcp_closed, Sock} ->
            ok
    end,
    etcp_test_utils:run_callback(Pool
                                ,?CALLBACK
                                ,handle_exit
                                ,fun(killed, {_, ?ADDR(Port0)}, State) when Port0 =:= Port -> {State, delete} end),
    ?assertEqual([], etcp:fetch_pool_connections(Pool)),
    gen_tcp:close(LSock),
    ok.


'2'(_Cfg) ->
    Port = etcp_test_utils:choose_port(),
    ?print("Starting server.", []),
    {ok, LSock} = gen_tcp:listen(Port, []),

    Self = erlang:self(),
    F =
        fun
            (#etcp_metadata{transporter = etcp_transporter_tcp, transporter_options = [], socket = Sock}) when Sock =/= undefined ->
                {ok, [{state, Self}]};
            (handle_exit) ->
                Self
        end,
    {ok, Pool} = etcp:start_link_connection_pool(?CALLBACK, F, [?ADDR(Port)]),

    {ok, Sock} = gen_tcp:accept(LSock),
    Result = etcp:fetch_pool_connections(Pool),
    ?assertMatch([{{_, ?ADDR(Port)}, _}], Result),
    [{_, ConPid}] = Result,
    erlang:exit(ConPid, kill),
    receive
        {tcp_closed, Sock} ->
            ok
    end,
    etcp_test_utils:run_callback(Pool
                                ,?CALLBACK
                                ,handle_exit
                                ,fun(killed, {_, ?ADDR(Port0)}, State) when Port0 =:= Port -> {State, restart} end),
    {ok, Sock2} = gen_tcp:accept(LSock),
    timer:sleep(500),

    Result2 = etcp:fetch_pool_connections(Pool),
    ?assertMatch([{{_, ?ADDR(Port)}, _}], Result2),
    [{_, ConPid2}] = Result2,
    erlang:exit(ConPid2, kill),
    receive
        {tcp_closed, Sock2} ->
            ok
    end,
    etcp_test_utils:run_callback(Pool
                                ,?CALLBACK
                                ,handle_exit
                                ,fun(killed, {_, ?ADDR(Port0)}, State) when Port0 =:= Port -> {State, {restart, 2000}} end),
    timer:sleep(500),
    ?assertEqual([], etcp:fetch_pool_connections(Pool)),
    timer:sleep(2000),
    {ok, Sock3} = gen_tcp:accept(LSock),
    Result3 = etcp:fetch_pool_connections(Pool),
    ?assertMatch([{{_, ?ADDR(Port)}, _}], Result3),
    [{_, ConPid3}] = Result3,
    erlang:exit(ConPid3, kill),
    receive
        {tcp_closed, Sock3} ->
            ok
    end,
    etcp_test_utils:run_callback(Pool
                                ,?CALLBACK
                                ,handle_exit
                                ,fun(killed, {_, ?ADDR(Port0)}, State) when Port0 =:= Port -> {State, {stop, oops}} end),
    timer:sleep(500),
    ?assertEqual({'EXIT', Pool, oops}, receive {'EXIT', _, _}=M -> M end),

    gen_tcp:close(LSock),
    ok.


'3'(_Cfg) ->
    Port = etcp_test_utils:choose_port(),
    ?print("Starting server.", []),
    ConCount = 10,
    {ok, LSock} = gen_tcp:listen(Port, [{backlog, ConCount+1}]),
    Self = erlang:self(),
    F =
        fun
            (#etcp_metadata{transporter = etcp_transporter_tcp, transporter_options = [], socket = Sock}) when Sock =/= undefined ->
                {ok, [{state, Self}]};
            (handle_exit) ->
                Self
        end,

    {ok, Pool} = etcp:start_link_connection_pool(?CALLBACK, F, [?ADDR(Port) || _ <- lists:seq(1, ConCount)]),
    ?assert(erlang:length(etcp:fetch_pool_connections(Pool)) =:= ConCount),

    {ok, _} = etcp:add_connection(Pool, ?HOST, Port),
    ?assert(erlang:length(etcp:fetch_pool_connections(Pool)) =:= ConCount+1),

    {_, ConPid} = erlang:hd(etcp:fetch_pool_connections(Pool)),
    ?print("m: ~p", [etcp_test_utils:messages()]),
    erlang:spawn_link(fun() -> ?assertEqual(ok, etcp:stop_connection(ConPid)) end),
    etcp_test_utils:run_callback(ConPid
                                ,?CALLBACK
                                ,terminate
                                ,fun(normal, _, _) -> ok end),
    timer:sleep(500),
    ?assert(erlang:length(etcp:fetch_pool_connections(Pool)) =:= ConCount),
    gen_tcp:close(LSock),
    ok.


'4'(_Cfg) ->
    ok.


'5'(_Cfg) ->
    ok.